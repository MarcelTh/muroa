#!/bin/env python

import os
import os.path
import string


import SCons.Util


def compiler_target_prefix(env, cross):
    
    scons_path_string = env['ENV'].get('PATH', [])
    # print scons_path # path is a single string with colon seperated dirs
    if not scons_path_string:
        scons_path_list = []
    if SCons.Util.is_String(scons_path_string):
        scons_path_list = string.split(scons_path_string, os.pathsep)

    os_path_list = string.split(os.environ['PATH'], os.pathsep)
    
    scons_path_list += os_path_list


    # it is possible to specify target as:
    # 1) target=arm-linux- 
    # 2) target=arm-linux
    # so try to find out <target>-gcc or <target>gcc exists in PATH


    concatenators = ['', '-']
    compiler_found = False

    for concat in concatenators:                                              # try if we have to insert a '-'
      cross_prefix = cross + concat
      compiler_bin = cross_prefix + env['CC']
      # print "seraching PATH for compiler binary: " + compiler_bin
      for directories in scons_path_list:                                     # search to PATH for the binary name
        compiler_bin_path = os.path.join(directories, compiler_bin)
        # print "trying if " + compiler_bin_path + " exists ..."
        if(os.path.exists(compiler_bin_path)):                                #  if the binary is found in PATH use the same cross_prefix for all other tools (ar, as, ...)
          print "using " + compiler_bin_path + " as compiler."
          compiler_found = True
          break
      else:
        pass
        # print compiler_bin + " not found in PATH"
      if(compiler_found == True):
        break
      
    else:
       print " Compiler not found in PATH!!! "

    env['ENV']['PATH'] = string.join(scons_path_list, os.pathsep)
    
    env['AR'] = cross_prefix + 'ar'
    env['AS'] = cross_prefix + 'as'
    env['CC'] = cross_prefix + 'gcc'
    env['CXX'] = cross_prefix + 'g++'
    env['RANLIB'] = cross_prefix + 'ranlib'

    return env


def compiler_env_vars(env):
    
    
    try:
      ld_path_list = string.split(os.environ['LDFLAGS'])
    except:
      ld_path_list = []
      print "info: LDFLAGS not set in environment."
      
      
    try:
      cxx_flags_list = string.split(os.environ['CXXFLAGS'])
    except:
      cxx_flags_list = []
      print "info: CXXFLAGS not set in environment."
    
    try:
      c_flags_list = string.split(os.environ['CFLAGS'])
    except:
      c_flags_list = []
      print "info: CFLAGS not set in environment."
      
    try:
      cpp_flags_list = string.split(os.environ['CPPFLAGS'])
    except:
      cpp_flags_list = []
      print "info: CPPFLAGS not set in environment."


    env['LIBPATH'] = []
    for element in ld_path_list:
      env.Append(LIBPATH=element.lstrip('-L'))


    env['CPPPATH'] = []
    for element in cpp_flags_list:
      env.Append(CPPPATH=element.lstrip('-I'))
      
    
    env['CXXFLAGS'] = []
    for element in cxx_flags_list:
      if(element.find('-I', 0) == 0):
        env.Append(CPPPATH=element.lstrip('-I'))
      elif(element.find('-L', 0) == 0):
        env.Append(LIBPATH=element.lstrip('-L'))
      else:
        env.Append(CXXFLAGS=element)
        
        
    env['CFLAGS'] = []
    for element in c_flags_list:
      if(element.find('-I', 0) == 0):
        env.Append(CPPPATH=element.lstrip('-I'))
      elif(element.find('-L', 0) == 0):
        env.Append(LIBPATH=element.lstrip('-L'))
      else:
        env.Append(CFLAGS=element)


#    print ld_path_list
    
    # look for -I and -L entries in CXXFLAGS and CFLAGS and mode them into cpp_flags_list and ld_path_list

    print "LIBPATH: ", env['LIBPATH']
    print "CPPPATH: ", env['CPPPATH']
    print "CXXFLAGS: ", env['CXXFLAGS']
    print "CFLAGS: ",  env['CFLAGS']
    
    return env






opts = Options()
opts.Add('target', "select compiler target prefix for cross compiling. E.g. if you have 'arm-linux-uclibc-gcc' in your path, specify 'target=arm-linux-uclibc'", 'native')
opts.Add('prefix', "specify an install prefix. Programs will be installed into 'prefix/bin' libs into 'prefix/lib'", '/usr/local/')
opts.Add('debug', "add debug information", '0')
opts.Add('release', "do an optimized release build", '1')


env = Environment(options = opts)

# for element in x86_env._dict:
#   print element 

print "Building for target:", env['target']

target = env['target']

if 'native' in target:
#     print('Compiling for native')
    target_prefix=''
    builddir = 'native'
    env = compiler_env_vars(env)
else:
    builddir = target
    env = compiler_target_prefix(env, target)
    env = compiler_env_vars(env)
    env.Append(CXXFLAGS='-DFIXPOINT')
    

if env['release']:
   env.Append(CXXFLAGS='-O2')
   


env.Append(CXXFLAGS=string.split('-D__USE_EXTERN_INLINES -D__USE_ISOC99'))
env.Append(LIBS='m')

Help(opts.GenerateHelpText(env))

env.Append(CPPPATH=Split("#libdsaudio #libdsserver #libsock++"))



conf = Configure(env)


lrint_test_source_file = """
#include <math.h>
int main()
{
  int out;
  out = lrint(0.123456);
   
  return 0;
}
"""

if not conf.TryLink(lrint_test_source_file, '.cpp'):
  print 'Did not find lrint(), using local version'
  conf.env.Append(CXXFLAGS='-DOWN_LRINT')
else:
  print 'Found lrint() on system, not using own version'

env = conf.Finish()

print "CXXFLAGS=", env['CXXFLAGS']

Export('env')


subdirs = Split('muroad dsserver libdsserver libdsaudio libsock++')


# env.SConscript('dsserver/SConscript')

sconscript_list = []
for subdir in subdirs:
	build_subdir = os.path.join(builddir, subdir)
	print build_subdir
        env.Append(LIBPATH='#'+build_subdir)
	env.BuildDir(build_subdir, subdir)
	# env.SConscript(subdir + '/SConscript', build_dir = build_dir + '/' + subdir, duplicate=1) 
	sconscript_file = os.path.join(build_subdir, 'SConscript')
	print sconscript_file
        env.SConscript(sconscript_file)
	sconscript_list += [sconscript_file]

# env.SConscript(sconscript_list)






















def compiler_arm_prefix(env):
	root_dir_tools = '/home/martin/openembedded/glomation/tmp/'
	staging_postfix = '/staging/arm-linux-uclibc/'
	cross_tools_postfix = '/cross/bin/'

	cross_toos_dir = root_dir_tools + cross_tools_postfix
	staging_dir = root_dir_tools + staging_postfix

	path = env['ENV'].get('PATH', [])
	if not path:
		path = []
	if SCons.Util.is_String(path):
		path = string.split(path, os.pathsep)

	env['ENV']['PATH'] = string.join([cross_toos_dir] + path, os.pathsep)

	cross = 'arm-linux-uclibc-'
	env['AR'] = cross + 'ar'
	env['AS'] = cross + 'as'
	env['CC'] = cross + 'gcc'
	env['CXX'] = cross + 'g++'
	env['RANLIB'] = cross + 'ranlib'

	env.Append(CPPPATH= staging_dir + 'include')
	env.Append(LIBPATH= staging_dir + 'lib')

	env.Append(CXXFLAGS='-O2 -D__USE_EXTERN_INLINES -D__USE_ISOC99')

	return env

def compiler_mipsel_prefix(env):
	root_dir_tools = '/home/martin/build/'
	staging_postfix = '/kamikaze-addons/mipsel/'
	cross_tools_postfix = '/kamikaze-buildroot/staging_dir_mipsel/bin/'

	cross_toos_dir = root_dir_tools + cross_tools_postfix
	staging_dir = root_dir_tools + staging_postfix

	path = env['ENV'].get('PATH', [])
	if not path:
		path = []
	if SCons.Util.is_String(path):
		path = string.split(path, os.pathsep)

	env['ENV']['PATH'] = string.join([cross_toos_dir] + path, os.pathsep)

	cross = 'mipsel-linux-'
	env['AR'] = cross + 'ar'
	env['AS'] = cross + 'as'
	env['CC'] = cross + 'gcc'
	env['CXX'] = cross + 'g++'
	env['RANLIB'] = cross + 'ranlib'

	env.Append(CPPPATH= staging_dir + 'include')
	env.Append(LIBPATH= staging_dir + 'lib')

	env.Append(CXXFLAGS='-O2 -D__USE_EXTERN_INLINES -D__USE_ISOC99')

	return env
